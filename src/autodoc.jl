module AutoDoc 
using HTTP 

include("util.jl"); using .Util 

export registerchema, swaggerpath, schemapath, getschema, 
    swaggerhtml, configdocs, mergeschema, setschema,
    enabledocs, disabledocs, isdocsenabled

global enable_auto_docs = true 
global swaggerpath = "/swagger"
global schemapath = "/swagger/schema"

global schema = Dict(
    "openapi" => "3.0.0",
    "info" => Dict(
        "title" => "API Overview",
        "version" => "1.0.0"
    ),
    "paths" => Dict()
)

"""
    isdocsenabled()

Returns true if we should mount the api doc endpoints, false otherwise
"""
function isdocsenabled()
    return enable_auto_docs
end

"""
    enabledocs()

Tells the api to mount the api doc endpoints on startup
"""
function enabledocs()
    global enable_auto_docs = true 
end

"""
    disabledocs()

Tells the api to SKIP mounting the api doc endpoints on startup
"""
function disabledocs()
    global enable_auto_docs = false 
end

"""
    configdocs(swagger_endpoint::String = "/swagger", schema_endpoint::String = "/swagger/schema")

Configure the default swagger and schema endpoints
"""
function configdocs(swagger_endpoint::String = swaggerpath, schema_endpoint::String = schemapath)
    global swaggerpath = swagger_endpoint
    global schemapath = schema_endpoint
end

"""
    getschema()

Return the current internal schema for this app
"""
function getschema()
    return schema 
end

"""
    setschema(customschema::Dict)

Overwrites the entire internal schema
"""
function setschema(customschema::Dict)
    global schema = customschema
end


"""
    mergeschema(route::String, customschema::Dict)

Merge the schema of a specific route
"""
function mergeschema(route::String, customschema::Dict)
    global schema["paths"][route] = recursive_merge(schema["paths"][route], customschema)
end


"""
    mergeschema(customschema::Dict)

Merge the top-level autogenerated schema with a custom schema
"""
function mergeschema(customschema::Dict)
    global schema = recursive_merge(getschema(), customschema)
end


"""
returns the openapi equivalent of each Julia type
"""
function gettype(type)
    if type in [Float64, Float32, Float16]
        return "number"
    elseif type in [Int128, Int64, Int32, Int16, Int8]
        return "integer"
    elseif type == Bool
        return "boolean"
    else 
        return "string"
    end
end


"""
used to generate & register schema related for a specific endpoint 
"""
function registerchema(path::String, httpmethod::String, parameters, returntype::Array)

    # skip any routes that have to do with swagger
    if path in [swaggerpath, schemapath]
        return 
    end

    params = []
    for (name, type) in parameters
        param = Dict( 
            "in" => "path",
            "name" => "$name", 
            "required" => "true",
            "schema" => Dict(
                "type" => gettype(type)
            )
        )
        push!(params, param)
    end

    route = Dict(
        "$(lowercase(httpmethod))" => Dict(
            "parameters" => params,
            "responses" => Dict(
                "200" => Dict("description" => "200 response"),
                "500" => Dict("description" => "500 Server encountered a problem")
            )
        )
    )
    schema["paths"][path] = route 
end

"""
return an HTML string to render the swagger docs
"""
function swaggerhtml() :: HTTP.Response
    html("""
        <!DOCTYPE html>
        <html lang="en">
        
        <head>
            <meta charset="utf-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <meta name="description" content="SwaggerUI" />
            <title>SwaggerUI</title>
            <link rel="stylesheet" href="https://unpkg.com/swagger-ui-dist@4.5.0/swagger-ui.css" />
        </head>
        
        <body>
            <div id="swagger-ui"></div>
            <script src="https://unpkg.com/swagger-ui-dist@4.5.0/swagger-ui-bundle.js" crossorigin></script>
            <script>
                window.onload = () => {
                    window.ui = SwaggerUIBundle({
                        url: window.location.origin + "$schemapath",
                        dom_id: '#swagger-ui',
                    });
                };
            </script>
        </body>
        
        </html>
    """
    )
end

end