var documenterSearchIndex = {"docs":
[{"location":"tutorial/bigger_applications/#Bigger-Applications-Multiple-Files","page":"Bigger Applications - Multiple Files","title":"Bigger Applications - Multiple Files","text":"","category":"section"},{"location":"tutorial/bigger_applications/","page":"Bigger Applications - Multiple Files","title":"Bigger Applications - Multiple Files","text":"If you are building an application or a web API, it's rarely the case that you can put everything on a single file.","category":"page"},{"location":"tutorial/bigger_applications/","page":"Bigger Applications - Multiple Files","title":"Bigger Applications - Multiple Files","text":"As your application grows you'll need to spread your application's logic across multiple files. Oxygen provides some tools to help you do this while staying organized.","category":"page"},{"location":"tutorial/bigger_applications/","page":"Bigger Applications - Multiple Files","title":"Bigger Applications - Multiple Files","text":"Let's say you have an application that looks something like this:","category":"page"},{"location":"tutorial/bigger_applications/","page":"Bigger Applications - Multiple Files","title":"Bigger Applications - Multiple Files","text":"app\n├── src\n│   ├── main.jl\n│   └── MathOperations.jl\n│\n├── Project.toml\n└── Manifest.toml","category":"page"},{"location":"tutorial/bigger_applications/#How-to-use-the-router()-function","page":"Bigger Applications - Multiple Files","title":"How to use the router() function","text":"","category":"section"},{"location":"tutorial/bigger_applications/","page":"Bigger Applications - Multiple Files","title":"Bigger Applications - Multiple Files","text":"Let's say you have a file dedicated to handling mathematical operations in the submodule at /src/MathOperations.jl.","category":"page"},{"location":"tutorial/bigger_applications/","page":"Bigger Applications - Multiple Files","title":"Bigger Applications - Multiple Files","text":"You might want the first part of each path to have the same value and just switch out the subpath to keep things organized in your api. You can use the router function to do just that. ","category":"page"},{"location":"tutorial/bigger_applications/","page":"Bigger Applications - Multiple Files","title":"Bigger Applications - Multiple Files","text":"The router() function is an HOF (higher order function) that allows you to reuse the same properties across multiple endpoints.","category":"page"},{"location":"tutorial/bigger_applications/","page":"Bigger Applications - Multiple Files","title":"Bigger Applications - Multiple Files","text":"Because the generated router is just a function, they can be exported and shared across multiple files & modules.","category":"page"},{"location":"tutorial/bigger_applications/","page":"Bigger Applications - Multiple Files","title":"Bigger Applications - Multiple Files","text":"using Oxygen\n\nmath = router(\"/math\", tags=[\"math\"])\n\n@get math(\"/multiply/{a}/{b}\", tags=[\"multiplication\"]) function(req, a::Float64, b::Float64)\n    return a * b\nend\n\n@get math(\"/divide/{a}/{b}\") function(req, a::Float64, b::Float64)\n    return a / b\nend\n\nserve()","category":"page"},{"location":"tutorial/bigger_applications/#Tagging-your-routes","page":"Bigger Applications - Multiple Files","title":"Tagging your routes","text":"","category":"section"},{"location":"tutorial/bigger_applications/","page":"Bigger Applications - Multiple Files","title":"Bigger Applications - Multiple Files","text":"By using the hello router in both endpoints, it passes along all the properties as default values. For example If we look at the routes registered in the application they will look like:","category":"page"},{"location":"tutorial/bigger_applications/","page":"Bigger Applications - Multiple Files","title":"Bigger Applications - Multiple Files","text":"/math/multiply/{a}/{b} /math/divide/{a}/{b}","category":"page"},{"location":"tutorial/bigger_applications/","page":"Bigger Applications - Multiple Files","title":"Bigger Applications - Multiple Files","text":"Both endpoints in this case will be tagged to the math tag and the /multiply endpoint will have an additional tag appended just to this endpoint called multiplication. These tags are used by Oxygen when auto-generating the documentation to organize it by separating the endpoints into sections based off their tags. ","category":"page"},{"location":"tutorial/bigger_applications/#Repeat-Actions","page":"Bigger Applications - Multiple Files","title":"Repeat Actions","text":"","category":"section"},{"location":"tutorial/bigger_applications/","page":"Bigger Applications - Multiple Files","title":"Bigger Applications - Multiple Files","text":"The router() function has an interval parameter which is used to call a request handler on a set interval (in seconds). ","category":"page"},{"location":"tutorial/bigger_applications/","page":"Bigger Applications - Multiple Files","title":"Bigger Applications - Multiple Files","text":"It's important to note that request handlers that use this property can't define additional function parameters outside of the default HTTP.Request parameter.","category":"page"},{"location":"tutorial/bigger_applications/","page":"Bigger Applications - Multiple Files","title":"Bigger Applications - Multiple Files","text":"In the example below, the /repeat/hello endpoint is called every 0.5 seconds and \"hello\" is printed to the console each time.","category":"page"},{"location":"tutorial/bigger_applications/","page":"Bigger Applications - Multiple Files","title":"Bigger Applications - Multiple Files","text":"using Oxygen\n\nrepeat = router(\"/repeat\", interval=0.5, tags=[\"repeat\"])\n\n@get repeat(\"/hello\") function()\n    println(\"hello\")\nend\n\n# you can override properties by setting route specific values \n@get repeat(\"/bonjour\", interval=1.5) function()\n    println(\"bonjour\")\nend\n\nserve()","category":"page"},{"location":"tutorial/bigger_applications/","page":"Bigger Applications - Multiple Files","title":"Bigger Applications - Multiple Files","text":"If you want to call an endpoint with parameters on a set interval, you're better off creating an endpoint to perform the action you want and a second endpoint to call the first on a set interval. ","category":"page"},{"location":"tutorial/bigger_applications/","page":"Bigger Applications - Multiple Files","title":"Bigger Applications - Multiple Files","text":"using HTTP\nusing Oxygen\n\nrepeat = router(\"/repeat\", interval=1.5, tags=[\"repeat\"])\n\n@get \"/multiply/{a}/{b}\" function(req, a::Float64, b::Float64)\n    return a * b\nend\n\n@get repeat(\"/multiply\") function()\n    response = internalrequest(HTTP.Request(\"GET\", \"/multiply/3/5\"))\n    println(response)\n    return response\nend\n\nserve()","category":"page"},{"location":"tutorial/bigger_applications/","page":"Bigger Applications - Multiple Files","title":"Bigger Applications - Multiple Files","text":"The example above will print the response from the /multiply endpoint in the console below every 1.5 seconds and should look like this:","category":"page"},{"location":"tutorial/bigger_applications/","page":"Bigger Applications - Multiple Files","title":"Bigger Applications - Multiple Files","text":"\"\"\"\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=utf-8\n\n15.0\"\"\"","category":"page"},{"location":"guide/#Tutorial-User-Guide","page":"Tutorial - User Guide","title":"Tutorial - User Guide","text":"","category":"section"},{"location":"guide/#First-Steps","page":"Tutorial - User Guide","title":"First Steps","text":"","category":"section"},{"location":"guide/","page":"Tutorial - User Guide","title":"Tutorial - User Guide","text":"Pages = [\n    \"tutorial/first_steps.md\"\n]","category":"page"},{"location":"guide/#Request-Types","page":"Tutorial - User Guide","title":"Request Types","text":"","category":"section"},{"location":"guide/","page":"Tutorial - User Guide","title":"Tutorial - User Guide","text":"Pages = [\n    \"tutorial/request_types.md\"\n]","category":"page"},{"location":"guide/#Path-Parameters","page":"Tutorial - User Guide","title":"Path Parameters","text":"","category":"section"},{"location":"guide/","page":"Tutorial - User Guide","title":"Tutorial - User Guide","text":"Pages = [\n    \"tutorial/path_parameters.md\"\n]","category":"page"},{"location":"guide/#Query-Parameters","page":"Tutorial - User Guide","title":"Query Parameters","text":"","category":"section"},{"location":"guide/","page":"Tutorial - User Guide","title":"Tutorial - User Guide","text":"Pages = [\n    \"tutorial/query_parameters.md\"\n]","category":"page"},{"location":"guide/#Request-Body","page":"Tutorial - User Guide","title":"Request Body","text":"","category":"section"},{"location":"guide/","page":"Tutorial - User Guide","title":"Tutorial - User Guide","text":"Pages = [\n    \"tutorial/request_body.md\"\n]","category":"page"},{"location":"guide/#Scaling-your-Applications","page":"Tutorial - User Guide","title":"Scaling your Applications","text":"","category":"section"},{"location":"guide/","page":"Tutorial - User Guide","title":"Tutorial - User Guide","text":"Pages = [\n    \"tutorial/bigger_applications.md\"\n]","category":"page"},{"location":"guide/#OAuth2-Integration","page":"Tutorial - User Guide","title":"OAuth2 Integration","text":"","category":"section"},{"location":"guide/","page":"Tutorial - User Guide","title":"Tutorial - User Guide","text":"Pages = [\n    \"tutorial/oauth2.md\"\n]","category":"page"},{"location":"api/#Api","page":"Api","title":"Api","text":"","category":"section"},{"location":"api/","page":"Api","title":"Api","text":"Documentation for Oxygen.jl","category":"page"},{"location":"api/#Starting-the-webserver","page":"Api","title":"Starting the webserver","text":"","category":"section"},{"location":"api/","page":"Api","title":"Api","text":"serve\nserveparallel","category":"page"},{"location":"api/#Oxygen.ServerUtil.serve","page":"Api","title":"Oxygen.ServerUtil.serve","text":"serve(; host=\"127.0.0.1\", port=8080, kwargs...)\n\nStart the webserver with the default request handler\n\n\n\n\n\nserve(handler::Function; host=\"127.0.0.1\", port=8080, kwargs...)\n\nStart the webserver with your own custom request handler\n\n\n\n\n\n","category":"function"},{"location":"api/#Oxygen.ServerUtil.serveparallel","page":"Api","title":"Oxygen.ServerUtil.serveparallel","text":"serveparallel(; host=\"127.0.0.1\", port=8080, queuesize=1024, kwargs...)\n\nStarts the webserver in streaming mode and spawns n - 1 worker threads to process individual requests. A Channel is used to schedule individual requests in FIFO order. Requests in the channel are then removed & handled by each the worker threads asynchronously. \n\n\n\n\n\nserveparallel(handler::Function; host=\"127.0.0.1\", port=8080, queuesize=1024, kwargs...)\n\nStarts the webserver in streaming mode with your own custom request handler and spawns n - 1 worker  threads to process individual requests. A Channel is used to schedule individual requests in FIFO order.  Requests in the channel are then removed & handled by each the worker threads asynchronously. \n\n\n\n\n\n","category":"function"},{"location":"api/#Routing","page":"Api","title":"Routing","text":"","category":"section"},{"location":"api/","page":"Api","title":"Api","text":"@get(path, func)\n@post(path, func)\n@put(path, func)\n@patch(path, func)\n@delete(path, func)\n@route(methods, path, func)","category":"page"},{"location":"api/#Oxygen.ServerUtil.@get-Tuple{Any, Any}","page":"Api","title":"Oxygen.ServerUtil.@get","text":"@get(path::String, func::Function)\n\nUsed to register a function to a specific endpoint to handle GET requests  \n\n\n\n\n\n","category":"macro"},{"location":"api/#Oxygen.ServerUtil.@post-Tuple{Any, Any}","page":"Api","title":"Oxygen.ServerUtil.@post","text":"@post(path::String, func::Function)\n\nUsed to register a function to a specific endpoint to handle POST requests\n\n\n\n\n\n","category":"macro"},{"location":"api/#Oxygen.ServerUtil.@put-Tuple{Any, Any}","page":"Api","title":"Oxygen.ServerUtil.@put","text":"@put(path::String, func::Function)\n\nUsed to register a function to a specific endpoint to handle PUT requests\n\n\n\n\n\n","category":"macro"},{"location":"api/#Oxygen.ServerUtil.@patch-Tuple{Any, Any}","page":"Api","title":"Oxygen.ServerUtil.@patch","text":"@patch(path::String, func::Function)\n\nUsed to register a function to a specific endpoint to handle PATCH requests\n\n\n\n\n\n","category":"macro"},{"location":"api/#Oxygen.ServerUtil.@delete-Tuple{Any, Any}","page":"Api","title":"Oxygen.ServerUtil.@delete","text":"@delete(path::String, func::Function)\n\nUsed to register a function to a specific endpoint to handle DELETE requests\n\n\n\n\n\n","category":"macro"},{"location":"api/#Oxygen.ServerUtil.@route-Tuple{Any, Any, Any}","page":"Api","title":"Oxygen.ServerUtil.@route","text":"@route(methods::Array{String}, path::String, func::Function)\n\nUsed to register a function to a specific endpoint to handle mulitiple request types\n\n\n\n\n\n","category":"macro"},{"location":"api/#Mounting-Files","page":"Api","title":"Mounting Files","text":"","category":"section"},{"location":"api/","page":"Api","title":"Api","text":"@staticfiles\n@dynamicfiles\nfile","category":"page"},{"location":"api/#Oxygen.ServerUtil.@staticfiles","page":"Api","title":"Oxygen.ServerUtil.@staticfiles","text":"@staticfiles(folder::String, mountdir::String)\n\nMount all files inside the /static folder (or user defined mount point)\n\n\n\n\n\n","category":"macro"},{"location":"api/#Oxygen.ServerUtil.@dynamicfiles","page":"Api","title":"Oxygen.ServerUtil.@dynamicfiles","text":"@dynamicfiles(folder::String, mountdir::String)\n\nMount all files inside the /static folder (or user defined mount point),  but files are re-read on each request\n\n\n\n\n\n","category":"macro"},{"location":"api/#Oxygen.FileUtil.file","page":"Api","title":"Oxygen.FileUtil.file","text":"file(filepath::String)\n\nReads a file as a String\n\n\n\n\n\n","category":"function"},{"location":"api/#Autogenerated-Docs","page":"Api","title":"Autogenerated Docs","text":"","category":"section"},{"location":"api/","page":"Api","title":"Api","text":"configdocs\nenabledocs\ndisabledocs\nisdocsenabled\nmergeschema\nsetschema\ngetschema\nenabledocs\ndisabledocs\nisdocsenabled","category":"page"},{"location":"api/#Oxygen.ServerUtil.AutoDoc.configdocs","page":"Api","title":"Oxygen.ServerUtil.AutoDoc.configdocs","text":"configdocs(docs_url::String = \"/docs\", schema_url::String = \"/docs/schema\")\n\nConfigure the default docs and schema endpoints\n\n\n\n\n\n","category":"function"},{"location":"api/#Oxygen.ServerUtil.AutoDoc.enabledocs","page":"Api","title":"Oxygen.ServerUtil.AutoDoc.enabledocs","text":"enabledocs()\n\nTells the api to mount the api doc endpoints on startup\n\n\n\n\n\n","category":"function"},{"location":"api/#Oxygen.ServerUtil.AutoDoc.disabledocs","page":"Api","title":"Oxygen.ServerUtil.AutoDoc.disabledocs","text":"disabledocs()\n\nTells the api to SKIP mounting the api doc endpoints on startup\n\n\n\n\n\n","category":"function"},{"location":"api/#Oxygen.ServerUtil.AutoDoc.isdocsenabled","page":"Api","title":"Oxygen.ServerUtil.AutoDoc.isdocsenabled","text":"isdocsenabled()\n\nReturns true if we should mount the api doc endpoints, false otherwise\n\n\n\n\n\n","category":"function"},{"location":"api/#Oxygen.ServerUtil.AutoDoc.mergeschema","page":"Api","title":"Oxygen.ServerUtil.AutoDoc.mergeschema","text":"mergeschema(route::String, customschema::Dict)\n\nMerge the schema of a specific route\n\n\n\n\n\nmergeschema(customschema::Dict)\n\nMerge the top-level autogenerated schema with a custom schema\n\n\n\n\n\n","category":"function"},{"location":"api/#Oxygen.ServerUtil.AutoDoc.setschema","page":"Api","title":"Oxygen.ServerUtil.AutoDoc.setschema","text":"setschema(customschema::Dict)\n\nOverwrites the entire internal schema\n\n\n\n\n\n","category":"function"},{"location":"api/#Oxygen.ServerUtil.AutoDoc.getschema","page":"Api","title":"Oxygen.ServerUtil.AutoDoc.getschema","text":"getschema()\n\nReturn the current internal schema for this app\n\n\n\n\n\n","category":"function"},{"location":"api/#Helper-functions","page":"Api","title":"Helper functions","text":"","category":"section"},{"location":"api/","page":"Api","title":"Api","text":"queryparams\nhtml\ntext\njson\nbinary","category":"page"},{"location":"api/#Oxygen.Util.queryparams","page":"Api","title":"Oxygen.Util.queryparams","text":"queryparams(request::HTTP.Request)\n\nParse's the query parameters from the Requests URL and return them as a Dict\n\n\n\n\n\n","category":"function"},{"location":"api/#Oxygen.Util.html","page":"Api","title":"Oxygen.Util.html","text":"html(content::String; status::Int, headers::Pair)\n\nA convenience funtion to return a String that should be interpreted as HTML\n\n\n\n\n\n","category":"function"},{"location":"api/#Oxygen.BodyParsers.text","page":"Api","title":"Oxygen.BodyParsers.text","text":"text(request::HTTP.Request)\n\nRead the body of a HTTP.Request as a String\n\n\n\n\n\ntext(response::HTTP.Response)\n\nRead the body of a HTTP.Response as a String\n\n\n\n\n\n","category":"function"},{"location":"api/#Oxygen.BodyParsers.json","page":"Api","title":"Oxygen.BodyParsers.json","text":"json(request::HTTP.Request)\n\nRead the body of a HTTP.Request as JSON\n\n\n\n\n\njson(request::HTTP.Request, classtype)\n\nRead the body of a HTTP.Request as JSON and serialize it into a custom struct\n\n\n\n\n\njson(response::HTTP.Response)\n\nRead the body of a HTTP.Response as JSON \n\n\n\n\n\njson(response::HTTP.Response, classtype)\n\nRead the body of a HTTP.Response as JSON and serialize it into a custom struct\n\n\n\n\n\n","category":"function"},{"location":"api/#Oxygen.BodyParsers.binary","page":"Api","title":"Oxygen.BodyParsers.binary","text":"binary(request::HTTP.Request)\n\nRead the body of a HTTP.Request as a Vector{UInt8}\n\n\n\n\n\n","category":"function"},{"location":"api/#Extra's","page":"Api","title":"Extra's","text":"","category":"section"},{"location":"api/","page":"Api","title":"Api","text":"router\ninternalrequest\nterminate()\nstarttasks\nstoptasks","category":"page"},{"location":"api/#Oxygen.ServerUtil.AutoDoc.router","page":"Api","title":"Oxygen.ServerUtil.AutoDoc.router","text":"router(prefix::String; tags::Vector{String} = [], interval::Union{Real, Nothing} = nothing)\n\nThis functions assists registering routes with a specific prefix. You can optionally assign tags either at the prefix and/or route level which are used to group and organize the autogenerated documentation\n\n\n\n\n\n","category":"function"},{"location":"api/#Oxygen.ServerUtil.internalrequest","page":"Api","title":"Oxygen.ServerUtil.internalrequest","text":"internalrequest(request::HTTP.Request)\n\nDirectly call one of our other endpoints registered with the router\n\n\n\n\n\ninternalrequest(request::HTTP.Request, handler::Function)\n\nDirectly call one of our other endpoints registered with the router, using your own Handler function\n\n\n\n\n\n","category":"function"},{"location":"api/#Oxygen.ServerUtil.terminate-Tuple{}","page":"Api","title":"Oxygen.ServerUtil.terminate","text":"terminate()\n\nstops the webserver immediately\n\n\n\n\n\n","category":"method"},{"location":"api/#Oxygen.ServerUtil.starttasks","page":"Api","title":"Oxygen.ServerUtil.starttasks","text":"starttasks()\n\nStart all background repeat tasks\n\n\n\n\n\n","category":"function"},{"location":"api/#Oxygen.ServerUtil.stoptasks","page":"Api","title":"Oxygen.ServerUtil.stoptasks","text":"stoptasks()\n\nStop all background repeat tasks\n\n\n\n\n\n","category":"function"},{"location":"tutorial/oauth2/#OAuth2-with-Umbrella.jl","page":"OAuth2 with Umbrella.jl","title":"OAuth2 with Umbrella.jl","text":"","category":"section"},{"location":"tutorial/oauth2/","page":"OAuth2 with Umbrella.jl","title":"OAuth2 with Umbrella.jl","text":"Umbrella.jl is a simple Julia authentication plugin, it supports Google and GitHub OAuth2 with more to come. Umbrella integrates with Julia web framework such as Genie.jl, Oxygen.jl or Mux.jl effortlessly.","category":"page"},{"location":"tutorial/oauth2/#Prerequisite","page":"OAuth2 with Umbrella.jl","title":"Prerequisite","text":"","category":"section"},{"location":"tutorial/oauth2/","page":"OAuth2 with Umbrella.jl","title":"OAuth2 with Umbrella.jl","text":"Before using the plugin, you need to obtain OAuth 2 credentials, see Google Identity Step 1, GitHub: Creating an OAuth App for details.","category":"page"},{"location":"tutorial/oauth2/#Installation","page":"OAuth2 with Umbrella.jl","title":"Installation","text":"","category":"section"},{"location":"tutorial/oauth2/","page":"OAuth2 with Umbrella.jl","title":"OAuth2 with Umbrella.jl","text":"pkg> add Umbrella","category":"page"},{"location":"tutorial/oauth2/#Basic-Usage","page":"OAuth2 with Umbrella.jl","title":"Basic Usage","text":"","category":"section"},{"location":"tutorial/oauth2/","page":"OAuth2 with Umbrella.jl","title":"OAuth2 with Umbrella.jl","text":"Many resources are available describing how OAuth 2 works, please advice OAuth 2.0, Google Identity, or GitHub OAuth 2 for details","category":"page"},{"location":"tutorial/oauth2/","page":"OAuth2 with Umbrella.jl","title":"OAuth2 with Umbrella.jl","text":"Follow the steps below to enable OAuth 2 in your application. ","category":"page"},{"location":"tutorial/oauth2/#.-Configuration","page":"OAuth2 with Umbrella.jl","title":"1. Configuration","text":"","category":"section"},{"location":"tutorial/oauth2/","page":"OAuth2 with Umbrella.jl","title":"OAuth2 with Umbrella.jl","text":"OAuth 2 required parameters such as client_id, client_secret and redirect_uri need to be configured through Configuration.Options. ","category":"page"},{"location":"tutorial/oauth2/","page":"OAuth2 with Umbrella.jl","title":"OAuth2 with Umbrella.jl","text":"scopes is a list of resources the application will access on user's behalf, it is vary from one provider to another.","category":"page"},{"location":"tutorial/oauth2/","page":"OAuth2 with Umbrella.jl","title":"OAuth2 with Umbrella.jl","text":"providerOptions configures the additional parameters at the redirection step, it is dependent on the provider.","category":"page"},{"location":"tutorial/oauth2/","page":"OAuth2 with Umbrella.jl","title":"OAuth2 with Umbrella.jl","text":"const options = Configuration.Options(;\n    client_id = \"\", # client id from an OAuth 2 provider\n    client_secret = \"\", # secret from an OAuth 2 provider\n    redirect_uri = \"http://localhost:3000/oauth2/google/callback\",\n    success_redirect = \"/protected\",\n    failure_redirect = \"/error\",\n    scopes = [\"profile\", \"openid\", \"email\"],\n    providerOptions = GoogleOptions(access_type=\"online\")\n)","category":"page"},{"location":"tutorial/oauth2/","page":"OAuth2 with Umbrella.jl","title":"OAuth2 with Umbrella.jl","text":"init function takes the provider and options, then returns an OAuth 2 instance. Available provider values are :google, :github and facebook. This list is growing as more providers are supported.","category":"page"},{"location":"tutorial/oauth2/","page":"OAuth2 with Umbrella.jl","title":"OAuth2 with Umbrella.jl","text":"oauth2_instance = init(:google, options)","category":"page"},{"location":"tutorial/oauth2/","page":"OAuth2 with Umbrella.jl","title":"OAuth2 with Umbrella.jl","text":"The examples will use Oxygen.jl as the web framework, but the concept is the same for other web frameworks.","category":"page"},{"location":"tutorial/oauth2/#.-Handle-provider-redirection","page":"OAuth2 with Umbrella.jl","title":"2. Handle provider redirection","text":"","category":"section"},{"location":"tutorial/oauth2/","page":"OAuth2 with Umbrella.jl","title":"OAuth2 with Umbrella.jl","text":"Create two endpoints,","category":"page"},{"location":"tutorial/oauth2/","page":"OAuth2 with Umbrella.jl","title":"OAuth2 with Umbrella.jl","text":"/ serve the login page which, in this case, is a Google OAuth 2 link.\n/oauth2/google handles redirections to an OAuth 2 server.","category":"page"},{"location":"tutorial/oauth2/","page":"OAuth2 with Umbrella.jl","title":"OAuth2 with Umbrella.jl","text":"@get \"/\" function ()\n  return \"<a href='/oauth2/google'>Authenticate with Google</a>\"\nend\n\n@get \"/oauth2/google\" function ()\n  oauth2_instance.redirect()\nend","category":"page"},{"location":"tutorial/oauth2/","page":"OAuth2 with Umbrella.jl","title":"OAuth2 with Umbrella.jl","text":"redirect function generates the URL using the parameters in step 1, and redirects users to provider's OAuth 2 server to initiate the authentication and authorization process.","category":"page"},{"location":"tutorial/oauth2/","page":"OAuth2 with Umbrella.jl","title":"OAuth2 with Umbrella.jl","text":"Once the users consent to grant access to one or more scopes requested by the application, OAuth 2 server responds the code for retrieving access token to a callback endpoint.","category":"page"},{"location":"tutorial/oauth2/#.-Retrieves-tokens","page":"OAuth2 with Umbrella.jl","title":"3. Retrieves tokens","text":"","category":"section"},{"location":"tutorial/oauth2/","page":"OAuth2 with Umbrella.jl","title":"OAuth2 with Umbrella.jl","text":"Finally, create the endpoint handling callback from the OAuth 2 server. The path must be identical to the path in redirect_uri from Configuration.Options.","category":"page"},{"location":"tutorial/oauth2/","page":"OAuth2 with Umbrella.jl","title":"OAuth2 with Umbrella.jl","text":"token_exchange function performs two actions,","category":"page"},{"location":"tutorial/oauth2/","page":"OAuth2 with Umbrella.jl","title":"OAuth2 with Umbrella.jl","text":"Use code responded by the OAuth 2 server to exchange an access token.\nGet user profile using the access token.","category":"page"},{"location":"tutorial/oauth2/","page":"OAuth2 with Umbrella.jl","title":"OAuth2 with Umbrella.jl","text":"A handler is required for access/refresh tokens and user profile handling.","category":"page"},{"location":"tutorial/oauth2/","page":"OAuth2 with Umbrella.jl","title":"OAuth2 with Umbrella.jl","text":"@get \"/oauth2/google/callback\" function (req)\n  query_params = queryparams(req)\n  code = query_params[\"code\"]\n\n  oauth2_instance.token_exchange(code, function (tokens, user)\n      # handle tokens and user profile here\n    end\n  )\nend","category":"page"},{"location":"tutorial/oauth2/#Full-Example","page":"OAuth2 with Umbrella.jl","title":"Full Example","text":"","category":"section"},{"location":"tutorial/oauth2/","page":"OAuth2 with Umbrella.jl","title":"OAuth2 with Umbrella.jl","text":"using Oxygen\nusing Umbrella\nusing HTTP\n\nconst oauth_path = \"/oauth2/google\"\nconst oauth_callback = \"/oauth2/google/callback\"\n\nconst options = Configuration.Options(;\n    client_id=\"\", # client id from Google API Console\n    client_secret=\"\", # secret from Google API Console\n    redirect_uri=\"http://127.0.0.1:8080$(oauth_callback)\",\n    success_redirect=\"/protected\",\n    failure_redirect=\"/no\",\n    scopes=[\"profile\", \"openid\", \"email\"]\n)\n\nconst google_oauth2 = Umbrella.init(:google, options)\n\n@get \"/\" function()\n  return \"<a href='$(oauth_path)'>Authenticate with Google</a>\"\nend\n\n@get oauth_path function()\n  # this handles the Google oauth2 redirect in the background\n  google_oauth2.redirect()\nend\n\n@get oauth_callback function(req)\n  query_params = queryparams(req)\n  code = query_params[\"code\"]\n\n  # handle tokens and user details\n  google_oauth2.token_exchange(code, \n    function (tokens::Google.Tokens, user::Google.User)\n      println(tokens.access_token)\n      println(tokens.refresh_token)\n      println(user.email)\n    end\n  )\nend\n\n@get \"/protected\" function()\n  \"Congrets, You signed in Successfully!\"\nend\n\n# start the web server\nserve()","category":"page"},{"location":"tutorial/query_parameters/#Query-Parameters","page":"Query Parameters","title":"Query Parameters","text":"","category":"section"},{"location":"tutorial/query_parameters/","page":"Query Parameters","title":"Query Parameters","text":"When you declare other function parameters that are not part of the path parameters, they are automatically interpreted as \"query\" parameters.","category":"page"},{"location":"tutorial/query_parameters/","page":"Query Parameters","title":"Query Parameters","text":"In the example below, we have two query parameters passed to our request handler","category":"page"},{"location":"tutorial/query_parameters/","page":"Query Parameters","title":"Query Parameters","text":"debug = true \nlimit = 10","category":"page"},{"location":"tutorial/query_parameters/","page":"Query Parameters","title":"Query Parameters","text":"http://127.0.0.1:8000/echo?debug=true&limit=10","category":"page"},{"location":"tutorial/query_parameters/","page":"Query Parameters","title":"Query Parameters","text":"To show how this works, lets take a look at this route below:","category":"page"},{"location":"tutorial/query_parameters/","page":"Query Parameters","title":"Query Parameters","text":"@get \"/echo\" function(req)\n    # the queryparams() function will extract all query paramaters from the url \n    return queryparams(req)\nend","category":"page"},{"location":"tutorial/query_parameters/","page":"Query Parameters","title":"Query Parameters","text":"If we hit this route with a url like the one below we should see the query parameters returned as a JSON object ","category":"page"},{"location":"tutorial/query_parameters/","page":"Query Parameters","title":"Query Parameters","text":"{\n    \"debug\": \"true\",\n    \"limit\": \"10\"\n}","category":"page"},{"location":"tutorial/query_parameters/","page":"Query Parameters","title":"Query Parameters","text":"The important distinction between query parameters and path parameters is that they are not automatically converted for you. In this example debug & limit are set to a string even though those aren't the \"correct\" data types.","category":"page"},{"location":"tutorial/request_body/#Request-Body","page":"Request Body","title":"Request Body","text":"","category":"section"},{"location":"tutorial/request_body/","page":"Request Body","title":"Request Body","text":"Whenever you need to send data from a client to your API,  you send it as a request body.","category":"page"},{"location":"tutorial/request_body/","page":"Request Body","title":"Request Body","text":"A request body is data sent by the client to your API (usually JSON). A response body is the data your API sends to the client.","category":"page"},{"location":"tutorial/request_body/","page":"Request Body","title":"Request Body","text":"Request bodies are useful when you need to send more complicated information to an API. Imagine we wanted to request an uber/lyft to come pick us up. The app (a client) will have to send a lot of information to make this happen. It'd need to send information about the user (like location data, membership info) and data about the destination. The api in turn will have to figure out pricing, available drivers and potential routes to take. ","category":"page"},{"location":"tutorial/request_body/","page":"Request Body","title":"Request Body","text":"The inputs of this api are pretty complicated which means it's a perfect case where we'd want to use the request body to send this information. You could send this kind of information through the URL, but I'd highly recommend you don't. Request bodies can store data in pretty much any format which is a lot more flexible than what a URL can support.","category":"page"},{"location":"tutorial/request_body/#Example","page":"Request Body","title":"Example","text":"","category":"section"},{"location":"tutorial/request_body/","page":"Request Body","title":"Request Body","text":"The request bodies can be read and converted to a Julia object by using the built-in json() helper function. ","category":"page"},{"location":"tutorial/request_body/","page":"Request Body","title":"Request Body","text":"struct Person\n    name::String\n    age::String\nend\n\n@post \"/create/struct\" function(req)\n    # this will convert the request body directly into a Person struct\n    person = json(req, Person)\n    return \"hello $(person.name)!\"\nend\n\n@post \"/create/dict\" function(req)\n    # this will convert the request body into a Julia Dict\n    data = json(req)\n    return \"hello $(data['name'])!\"\nend","category":"page"},{"location":"tutorial/request_body/","page":"Request Body","title":"Request Body","text":"When converting JSON into struct's Oxygen will throw an error if the request body doesn't match the struct, all properties need to be visible and match the right type. ","category":"page"},{"location":"tutorial/request_body/","page":"Request Body","title":"Request Body","text":"If you don't pass a struct to convert the JSON into, then it will convert the JSON into a Julia Dictionary. This has the benefit of being able to take JSON of any shape which is helpful when your data can change shape or is unknown. ","category":"page"},{"location":"tutorial/path_parameters/#Path-Parameters","page":"Path Parameters","title":"Path Parameters","text":"","category":"section"},{"location":"tutorial/path_parameters/","page":"Path Parameters","title":"Path Parameters","text":"You can declare path \"parameters\" or \"variables\" inside your route with braces and those values are passed directly to your request handler. ","category":"page"},{"location":"tutorial/path_parameters/","page":"Path Parameters","title":"Path Parameters","text":"@get \"/multiply/{a}/{b}\" function(req, a::Float64, b::Float64)\n    return a * b\nend","category":"page"},{"location":"tutorial/path_parameters/","page":"Path Parameters","title":"Path Parameters","text":"The values of {a} & {b} in the path will get passed to the request handler with the parameter with the same name. ","category":"page"},{"location":"tutorial/path_parameters/#Path-parameters-with-types","page":"Path Parameters","title":"Path parameters with types","text":"","category":"section"},{"location":"tutorial/path_parameters/","page":"Path Parameters","title":"Path Parameters","text":"You can declare the type of a path parameter in the function, using standard Julia type annotations","category":"page"},{"location":"tutorial/path_parameters/","page":"Path Parameters","title":"Path Parameters","text":"Let's take a look back at our first example above we have code to add two numbers.","category":"page"},{"location":"tutorial/path_parameters/","page":"Path Parameters","title":"Path Parameters","text":"@get \"/multiply/{a}/{b}\" function(req, a::Float64, b::Float64)","category":"page"},{"location":"tutorial/path_parameters/","page":"Path Parameters","title":"Path Parameters","text":"In this line we have our request type, route, and function handler defined. Looking closer at our request handler,  we can see our variables have type annotations attached to them. ","category":"page"},{"location":"tutorial/path_parameters/","page":"Path Parameters","title":"Path Parameters","text":"Oxygen will use any type annotations you give it to try to convert the incoming data into that type.  Granted, these are completely optional, if you leave out the type annotation then Oxygen will  assume it's a string by default. Below is another way to write the same function without type annotations.","category":"page"},{"location":"tutorial/path_parameters/","page":"Path Parameters","title":"Path Parameters","text":"@get \"/multiply/{a}/{b}\" function(req, a, b)\n    return parse(Float64, a) * parse(Float64, b)\nend","category":"page"},{"location":"tutorial/path_parameters/#Additional-Parameter-Type-Support","page":"Path Parameters","title":"Additional Parameter Type Support","text":"","category":"section"},{"location":"tutorial/path_parameters/","page":"Path Parameters","title":"Path Parameters","text":"Oxygen supports a lot of different path parameter types outside of  Julia's base primitives. More complex types & structs are automatically parsed  and passed to your request handlers.","category":"page"},{"location":"tutorial/path_parameters/","page":"Path Parameters","title":"Path Parameters","text":"In most cases, Oxygen uses the built-in parse() function to parse incoming parameters.  But when the parameter types start getting more complex (eg. Vector{Int64} or a custom struct), then Oxygen assumes the parameter is a JSON string and uses the JSON3 library  to serialize the parameter into the corresponding type","category":"page"},{"location":"tutorial/path_parameters/","page":"Path Parameters","title":"Path Parameters","text":"using Dates\nusing Oxygen\nusing StructTypes\n\n@enum Fruit apple=1 orange=2 kiwi=3\n\nstruct Person \n  name  :: String \n  age   :: Int8\nend\n\n# Add a supporting struct types\nStructTypes.StructType(::Type{Person}) = StructTypes.Struct()\nStructTypes.StructType(::Type{Complex{Float64}}) = StructTypes.Struct()\n\n@get \"/fruit/{fruit}\" function(req, fruit::Fruit)\n  return fruit\nend\n\n@get \"/date/{date}\" function(req, date::Date)\n  return date\nend\n\n@get \"/datetime/{datetime}\" function(req, datetime::DateTime)\n  return datetime\nend\n\n@get \"/complex/{complex}\" function(req, complex::Complex{Float64})\n  return complex\nend\n\n@get \"/list/{list}\" function(req, list::Vector{Float32})\n    return list\nend\n\n@get \"/data/{dict}\" function(req, dict::Dict{String, Any})\n  return dict\nend\n\n@get \"/tuple/{tuple}\" function(req, tuple::Tuple{String, String})\n  return tuple\nend\n\n@get \"/union/{value}\" function(req, value::Union{Bool, String, Float64})\n  return value\nend\n\n@get \"/boolean/{bool}\" function(req, bool::Bool)\n  return bool\nend\n\n@get \"/struct/{person}\" function(req, person::Person)\n  return person\nend\n\n@get \"/float/{float}\" function (req, float::Float32)\n  return float\nend\n\nserve()","category":"page"},{"location":"tutorial/path_parameters/#Documentation","page":"Path Parameters","title":"Documentation","text":"","category":"section"},{"location":"tutorial/path_parameters/","page":"Path Parameters","title":"Path Parameters","text":"And when you open your browser at http://127.0.0.1:8080/docs, you will see the autogenerated interactive documentation for your api. ","category":"page"},{"location":"tutorial/path_parameters/","page":"Path Parameters","title":"Path Parameters","text":"If type annotations were provided in the request handler, they will be taken into account  when generating the openapi spec. This means that the generated documentation will know  what the input types will be and will not only show, but enforce those types through the interactive documentation. ","category":"page"},{"location":"tutorial/path_parameters/","page":"Path Parameters","title":"Path Parameters","text":"Practically, this means that your users will know exactly how to call your endpoint and  your inputs will always remain up to date with the code.  ","category":"page"},{"location":"#Oxygen.jl","page":"Overview","title":"Oxygen.jl","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"<div>\n  </br>\n  <p align=\"center\"><img src=\"oxygen.png\" width=\"20%\"></p>\n  <p align=\"center\">\n    <strong>A breath of fresh air for programming web apps in Julia.</strong>\n  </p>\n  <p align=\"center\">\n    <a href='https://ndortega.github.io/Oxygen.jl/stable/'><img src='https://img.shields.io/badge/docs-stable-blue.svg' alt='documentation stable' /></a>\n    <a href='https://github.com/ndortega/Oxygen.jl/actions/workflows/ci.yml'><img src='https://github.com/ndortega/Oxygen.jl/actions/workflows/ci.yml/badge.svg' alt='Build Status' /></a>\n    <a href='https://codecov.io/gh/ndortega/Oxygen.jl'><img src='https://codecov.io/gh/ndortega/Oxygen.jl/branch/master/graph/badge.svg?token=7GV8X1C98M' alt='Coverage Status' /></a>\n  </p>\n</div>","category":"page"},{"location":"#About","page":"Overview","title":"About","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"Oxygen is a micro-framework built on top of the HTTP.jl library.  Breathe easy knowing you can quickly spin up a web server with abstractions you're already familiar with.","category":"page"},{"location":"#Features","page":"Overview","title":"Features","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"Straightforward routing (@get, @post, @put, @patch, @delete and @route macros)\nAuto-generated swagger documentation\nOut-of-the-box JSON serialization & deserialization \nType definition support for path parameters\nStatic file hosting\nBuilt-in multithreading support","category":"page"},{"location":"#Installation","page":"Overview","title":"Installation","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"pkg> add Oxygen","category":"page"},{"location":"#Minimalistic-Example","page":"Overview","title":"Minimalistic Example","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"Create a web-server with very few lines of code","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"using Oxygen\nusing HTTP\n\n@get \"/greet\" function(req::HTTP.Request)\n    return \"hello world!\"\nend\n\n# start the web server\nserve()","category":"page"},{"location":"#Request-handlers","page":"Overview","title":"Request handlers","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"Request handlers are just functions, which means there are many valid ways to express them","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Request handlers don't have to be defined where the routes are. They can be imported from other modules and spread across multiple files\nJust like the request handlers, routes can be declared across multiple modules and files","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"using Oxygen\n\n@get \"/greet\" function()\n    \"hello world!\"\nend\n\n@get \"/saluer\" () -> begin\n    \"Bonjour le monde!\"\nend\n\n@get \"/saludar\" () -> \"¡Hola Mundo!\"\n@get \"/salutare\" f() = \"ciao mondo!\"\n\n# This function can be declared in another module\nfunction subtract(req, a::Float64, b::Float64)\n  return a - b\nend\n\n# register foreign request handlers like this\n@get \"/subtract/{a}/{b}\" subtract\n\n# start the web server\nserve()","category":"page"},{"location":"#Path-parameters","page":"Overview","title":"Path parameters","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"Path parameters are declared with braces and are passed directly to your request handler. ","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"using Oxygen\n\n# use path params without type definitions (defaults to Strings)\n@get \"/add/{a}/{b}\" function(req, a, b)\n    return parse(Float64, a) + parse(Float64, b)\nend\n\n# use path params with type definitions (they are automatically converted)\n@get \"/multiply/{a}/{b}\" function(req, a::Float64, b::Float64)\n    return a * b\nend\n\n# The order of the parameters doesn't matter (just the name matters)\n@get \"/subtract/{a}/{b}\" function(req, b::Int64, a::Int64)\n    return a - b\nend\n\n# start the web server\nserve()","category":"page"},{"location":"#Query-parameters","page":"Overview","title":"Query parameters","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"Use the queryparams() function to extract and parse parameters from the url","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"using Oxygen\nusing HTTP\n\n@get \"/query\" function(req::HTTP.Request)\n    # extract & return the query params from the request object\n    return queryparams(req)\nend\n\n# start the web server\nserve()","category":"page"},{"location":"#Interpolating-variables-into-endpoints","page":"Overview","title":"Interpolating variables into endpoints","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"You can interpolate variables directly into the paths, which makes dynamically registering routes a breeze ","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"(Thanks to @anandijain for the idea)","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"using Oxygen\n\noperations = Dict(\"add\" => +, \"multiply\" => *)\nfor (pathname, operator) in operations\n    @get \"/$pathname/{a}/{b}\" function (req, a::Float64, b::Float64)\n        return operator(a, b)\n    end\nend\n\n# start the web server\nserve()","category":"page"},{"location":"#Return-JSON","page":"Overview","title":"Return JSON","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"All objects are automatically deserialized into JSON using the JSON3 library","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"using Oxygen\nusing HTTP\n\n@get \"/data\" function(req::HTTP.Request)\n    return Dict(\"message\" => \"hello!\", \"value\" => 99.3)\nend\n\n# start the web server\nserve()","category":"page"},{"location":"#Deserialize-and-Serialize-custom-structs","page":"Overview","title":"Deserialize & Serialize custom structs","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"Oxygen provides some out-of-the-box serialization & deserialization for most objects but requires the use of StructTypes when converting structs","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"using Oxygen\nusing HTTP\nusing StructTypes\n\nstruct Animal\n    id::Int\n    type::String\n    name::String\nend\n\n# Add a supporting struct type definition so JSON3 can serialize & deserialize automatically\nStructTypes.StructType(::Type{Animal}) = StructTypes.Struct()\n\n@get \"/get\" function(req::HTTP.Request)\n    # serialize struct into JSON automatically (because we used StructTypes)\n    return Animal(1, \"cat\", \"whiskers\")\nend\n\n@post \"/echo\" function(req::HTTP.Request)\n    # deserialize JSON from the request body into an Animal struct\n    animal = json(req, Animal)\n    # serialize struct back into JSON automatically (because we used StructTypes)\n    return animal\nend\n\n# start the web server\nserve()","category":"page"},{"location":"#Routers","page":"Overview","title":"Routers","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"The router() function is an HOF (higher order function) that allows you to reuse the same properties across multiple endpoints. This is helpful when your api starts to grow and you want to keep your path operations organized","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"using Oxygen\n\n# Any routes that use this router, will be automatically grouped \n# under the 'math' tag in the autogenerated documenation\nmath = router(\"/math\", tags=[\"math\"])\n\n# You can also assign route specific tags\n@get math(\"/multiply/{a}/{b}\", tags=[\"multiplication\"]) function(req, a::Float64, b::Float64)\n    return a * b\nend\n\n@get math(\"/divide/{a}/{b}\") function(req, a::Float64, b::Float64)\n    return a / b\nend\n\nserve()","category":"page"},{"location":"#Repeat-Actions","page":"Overview","title":"Repeat Actions","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"The router() function has an interval parameter which is used to call a request handler on a set interval (in seconds). ","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"It's important to note that request handlers that use this property can't define additional function parameters outside of the default HTTP.Request parameter.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"In the example below, the /repeat/hello endpoint is called every 0.5 seconds and \"hello\" is printed to the console each time.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"using Oxygen\n\nrepeat = router(\"/repeat\", interval=0.5, tags=[\"repeat\"])\n\n@get repeat(\"/hello\") function()\n    println(\"hello\")\nend\n\n# you can override properties by setting route specific values \n@get repeat(\"/bonjour\", interval=1.5) function()\n    println(\"bonjour\")\nend\n\nserve()","category":"page"},{"location":"#Mounting-Static-Files","page":"Overview","title":"Mounting Static Files","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"You can mount static files using this handy macro which recursively searches a folder for files and mounts everything. All files are  loaded into memory on startup.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"using Oxygen\n\n# mount all files inside the \"content\" folder under the \"/static\" path\n@staticfiles \"content\" \"static\"\n\n# start the web server\nserve()","category":"page"},{"location":"#Mounting-Dynamic-Files","page":"Overview","title":"Mounting Dynamic Files","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"Similar to @staticfiles, this macro mounts each path and re-reads the file for each request. This means that any changes to the files after the server has started will be displayed.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"using Oxygen\n\n# mount all files inside the \"content\" folder under the \"/dynamic\" path\n@dynamicfiles \"content\" \"dynamic\"\n\n# start the web server\nserve()","category":"page"},{"location":"#Logging","page":"Overview","title":"Logging","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"Oxygen provides a default logging format but allows you to customize the format using the access_log parameter. This functionality is available in both  the serve() and serveparallel() functions.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"You can read more about the logging options here","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"# Uses the default logging format\nserve()\n\n# Customize the logging format \nserve(access_log=logfmt\"[$time_iso8601] \\\"$request\\\" $status\")\n\n# Disable internal request logging \nserve(access_log=nothing)","category":"page"},{"location":"#Multithreading-and-Parallelism","page":"Overview","title":"Multithreading & Parallelism","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"For scenarios where you need to handle higher amounts of traffic, you can run Oxygen in a  multithreaded mode. In order to utilize this mode, julia must have more than 1 thread to work with. You can start a julia session with 4 threads using the command below","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"julia --threads 4","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"serveparallel(queuesize=1024) Starts the webserver in streaming mode and spawns n - 1 worker  threads. The queuesize parameter sets how many requests can be scheduled within the queue (a julia Channel) before they start getting dropped. Each worker thread pops requests off the queue and handles them asynchronously within each thread. ","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"using Oxygen\nusing StructTypes\nusing Base.Threads\n\n# Make the Atomic struct serializable\nStructTypes.StructType(::Type{Atomic{Int64}}) = StructTypes.Struct()\n\nx = Atomic{Int64}(0);\n\n@get \"/show\" function()\n    return x\nend\n\n@get \"/increment\" function()\n    atomic_add!(x, 1)\n    return x\nend\n\n# start the web server in parallel mode\nserveparallel()","category":"page"},{"location":"#Autogenerated-Docs-with-Swagger","page":"Overview","title":"Autogenerated Docs with Swagger","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"Swagger documentation is automatically generated for each route you register in your application. Only the route name, parameter types, and 200 & 500 responses are automatically created for you by default. ","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"You can view your generated documentation at /docs, and the schema can be found under /docs/schema. Both of these values can be changed to whatever you want using the configdocs() function. You can also opt out of autogenerated docs entirely by calling the disabledocs() function  before starting your application. ","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"To add additional details you can either use the built-in mergeschema() or setschema() functions to directly modify the schema yourself or merge the generated schema from the SwaggerMarkdown.jl package (I'd recommend the latter)","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Below is an example of how to merge the schema generated from the SwaggerMarkdown.jl package.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"using Oxygen\nusing SwaggerMarkdown\n\n# Here's an example of how you can merge autogenerated docs from SwaggerMarkdown.jl into your api\n@swagger \"\"\"\n/divide/{a}/{b}:\n  get:\n    description: Return the result of a / b\n    parameters:\n      - name: a\n        in: path\n        required: true\n        description: this is the value of the numerator \n        schema:\n          type : number\n    responses:\n      '200':\n        description: Successfully returned an number.\n\"\"\"\n@get \"/divide/{a}/{b}\" function (req, a::Float64, b::Float64)\n    return a / b\nend\n\n# title and version are required\ninfo = Dict(\"title\" => \"My Demo Api\", \"version\" => \"1.0.0\")\nopenApi = OpenAPI(\"3.0\", info)\nswagger_document = build(openApi)\n  \n# merge the SwaggerMarkdown schema with the internal schema\nmergeschema(swagger_document)\n\n# start the web server\nserve()","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Below is an example of how to manually modify the schema","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"using Oxygen\nusing SwaggerMarkdown\n\n# Only the basic information is parsed from this route when generating docs\n@get \"/multiply/{a}/{b}\" function (req, a::Float64, b::Float64)\n    return a * b\nend\n\n# Here's an example of how to update a part of the schema yourself\nmergeschema(\"/multiply/{a}/{b}\", \n  Dict(\n    \"get\" => Dict(\n      \"description\" => \"return the result of a * b\"\n    )\n  )\n)\n\n# Here's another example of how to update a part of the schema yourself, but this way allows you to modify other properties defined at the root of the schema (title, summary, etc.)\nmergeschema(\n  Dict(\n    \"paths\" => Dict(\n      \"/multiply/{a}/{b}\" => Dict(\n        \"get\" => Dict(\n          \"description\" => \"return the result of a * b\"\n        )\n      )\n    )\n  )\n)","category":"page"},{"location":"#API-Reference-(macros)","page":"Overview","title":"API Reference (macros)","text":"","category":"section"},{"location":"#@get,-@post,-@put,-@patch,-@delete","page":"Overview","title":"@get, @post, @put, @patch, @delete","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"  @get(path, func)","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Parameter Type Description\npath string Required. The route to register\nfunc function Required. The request handler for this route","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Used to register a function to a specific endpoint to handle that corresponding type of request","category":"page"},{"location":"#@route","page":"Overview","title":"@route","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"  @route(methods, path, func)","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Parameter Type Description\nmethods array Required. The types of HTTP requests to register to this route\npath string Required. The route to register\nfunc function Required. The request handler for this route","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Low-level macro that allows a route to be handle multiple request types","category":"page"},{"location":"#@staticfiles","page":"Overview","title":"@staticfiles","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"  @staticfiles(folder, mount)","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Parameter Type Description\nfolder string Required. The folder to serve files from\nmountdir string The root endpoint to mount files under (default is \"static\")","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Serve all static files within a folder. This function recursively searches a directory and mounts all files under the mount directory using their relative paths.","category":"page"},{"location":"#Request-helper-functions","page":"Overview","title":"Request helper functions","text":"","category":"section"},{"location":"#html()","page":"Overview","title":"html()","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"  html(content, status, headers)","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Parameter Type Description\ncontent string Required. The string to be returned as HTML\nstatus integer The HTTP response code (default is 200)\nheaders dict The headers for the HTTP response (default has content-type header set to \"text/html; charset=utf-8\")","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Helper function to designate when content should be returned as HTML","category":"page"},{"location":"#queryparams()","page":"Overview","title":"queryparams()","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"  queryparams(request)","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Parameter Type Description\nreq HTTP.Request Required. The HTTP request object","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Returns the query parameters from a request as a Dict()","category":"page"},{"location":"#Body-Functions","page":"Overview","title":"Body Functions","text":"","category":"section"},{"location":"#text()","page":"Overview","title":"text()","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"  text(request)","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Parameter Type Description\nreq HTTP.Request Required. The HTTP request object","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Returns the body of a request as a string","category":"page"},{"location":"#binary()","page":"Overview","title":"binary()","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"  binary(request)","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Parameter Type Description\nreq HTTP.Request Required. The HTTP request object","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Returns the body of a request as a binary file (returns a vector of UInt8s)","category":"page"},{"location":"#json()","page":"Overview","title":"json()","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"  json(request, classtype)","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Parameter Type Description\nreq HTTP.Request Required. The HTTP request object\nclasstype struct A struct to deserialize a JSON object into","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Deserialize the body of a request into a julia struct ","category":"page"},{"location":"tutorial/first_steps/#First-Steps","page":"First Steps","title":"First Steps","text":"","category":"section"},{"location":"tutorial/first_steps/","page":"First Steps","title":"First Steps","text":"In this tutorial, you'll learn about all the core features of Oxygen ia a simple step-by-step approach. This guide will be aimed at beginner/intermediate users and will gradually build upon each other. ","category":"page"},{"location":"tutorial/first_steps/#Setup-your-first-project","page":"First Steps","title":"Setup your first project","text":"","category":"section"},{"location":"tutorial/first_steps/","page":"First Steps","title":"First Steps","text":"Navigate to your projects folder (If you're using and editor like vscode, just open up your project folder","category":"page"},{"location":"tutorial/first_steps/","page":"First Steps","title":"First Steps","text":"cd /path/to/your/project","category":"page"},{"location":"tutorial/first_steps/","page":"First Steps","title":"First Steps","text":"Open open a terminal and start the julia repl with this command","category":"page"},{"location":"tutorial/first_steps/","page":"First Steps","title":"First Steps","text":"julia","category":"page"},{"location":"tutorial/first_steps/","page":"First Steps","title":"First Steps","text":"Before we go any further, lets create a new environment for this project. Press the ] key inside the repl to use Pkg (julia's jult in package manager)  you should see something similar to (v1.7) pkg> in the repl","category":"page"},{"location":"tutorial/first_steps/","page":"First Steps","title":"First Steps","text":"Activate your current environment ","category":"page"},{"location":"tutorial/first_steps/","page":"First Steps","title":"First Steps","text":"pkg> activate .","category":"page"},{"location":"tutorial/first_steps/","page":"First Steps","title":"First Steps","text":"Install the latest version of Oxygen and HTTP","category":"page"},{"location":"tutorial/first_steps/","page":"First Steps","title":"First Steps","text":"pkg> add Oxygen HTTP","category":"page"},{"location":"tutorial/first_steps/","page":"First Steps","title":"First Steps","text":"Press the backspace button to exit the package manager and return to the julia repl","category":"page"},{"location":"tutorial/first_steps/","page":"First Steps","title":"First Steps","text":"If everything was done correctly, you should see a Project.toml and Manifest.toml  file created in your project folder","category":"page"},{"location":"tutorial/first_steps/","page":"First Steps","title":"First Steps","text":"Next lets create our src folder and our main.jl file. Once that's complete, our project  should ook something like this.","category":"page"},{"location":"tutorial/first_steps/","page":"First Steps","title":"First Steps","text":"project\n├── src\n│   ├── main.jl\n├── Project.toml\n├── Manifest.toml\n","category":"page"},{"location":"tutorial/first_steps/","page":"First Steps","title":"First Steps","text":"For the duration of this guide, we will be working out of the src/main.jl file ","category":"page"},{"location":"tutorial/first_steps/#Creating-your-first-web-server","page":"First Steps","title":"Creating your first web server","text":"","category":"section"},{"location":"tutorial/first_steps/","page":"First Steps","title":"First Steps","text":"Here's an example of what a simple Oxygen server could look like","category":"page"},{"location":"tutorial/first_steps/","page":"First Steps","title":"First Steps","text":"module Main \nusing Oxygen\nusing HTTP\n\n@get \"/greet\" function(req::HTTP.Request)\n    return \"hello world!\"\nend\n\nserve()\nend","category":"page"},{"location":"tutorial/first_steps/","page":"First Steps","title":"First Steps","text":"Start the webserver with:","category":"page"},{"location":"tutorial/first_steps/","page":"First Steps","title":"First Steps","text":"include(\"src/main.jl\")","category":"page"},{"location":"tutorial/first_steps/#Line-by-line","page":"First Steps","title":"Line by line","text":"","category":"section"},{"location":"tutorial/first_steps/","page":"First Steps","title":"First Steps","text":"using Oxygen\nusing HTTP","category":"page"},{"location":"tutorial/first_steps/","page":"First Steps","title":"First Steps","text":"Here we pull in the both libraries our api depends on. The @get macro and serve() function come from Oxygen and the HTTP.Request type comes from the HTTP library.","category":"page"},{"location":"tutorial/first_steps/","page":"First Steps","title":"First Steps","text":"Next we move into the core snippet where we define a route for our api. This route is made up of several components.","category":"page"},{"location":"tutorial/first_steps/","page":"First Steps","title":"First Steps","text":"http method  => from @get macro (it's a GET request)\npath => the endpoint that will get added to our api which is \"/greet\"\nrequest handler => The function that accepts a request and returns a response","category":"page"},{"location":"tutorial/first_steps/","page":"First Steps","title":"First Steps","text":"@get \"/greet\" function(req::HTTP.Request)\n    return \"hello world!\"\nend","category":"page"},{"location":"tutorial/first_steps/","page":"First Steps","title":"First Steps","text":"Finally at the bottom of our Main module we have this function to start up our brand new webserver. This function can take a number of keyword arguments such as the host & port, which can be helpful if you don't want to use the default values.","category":"page"},{"location":"tutorial/first_steps/","page":"First Steps","title":"First Steps","text":"serve()","category":"page"},{"location":"tutorial/first_steps/","page":"First Steps","title":"First Steps","text":"For example, you can start your server on port 8000 instead of 8080 which is used by default","category":"page"},{"location":"tutorial/first_steps/","page":"First Steps","title":"First Steps","text":"serve(port=8000)","category":"page"},{"location":"tutorial/first_steps/#Try-out-your-endpoints","page":"First Steps","title":"Try out your endpoints","text":"","category":"section"},{"location":"tutorial/first_steps/","page":"First Steps","title":"First Steps","text":"You should see the server starting up inside the console.  You should be able to hit http://127.0.0.1:8080/greet inside your browser and see the following:","category":"page"},{"location":"tutorial/first_steps/","page":"First Steps","title":"First Steps","text":"\"hello world!\"","category":"page"},{"location":"tutorial/first_steps/#Interactive-API-documenation","page":"First Steps","title":"Interactive API documenation","text":"","category":"section"},{"location":"tutorial/first_steps/","page":"First Steps","title":"First Steps","text":"Open your browser to http://127.0.0.1:8080/docs Here you'll see the auto-generated documentation for your api.  This is done internally by generating a JSON object that conforms to the openapi format.  Once generated, you can feed this same schema to libraries like swagger which translate this  into an interactive api for you to explore.","category":"page"},{"location":"tutorial/request_types/#Request-Types","page":"Request Types","title":"Request Types","text":"","category":"section"},{"location":"tutorial/request_types/","page":"Request Types","title":"Request Types","text":"When designing an API you need to first think about what type of requests and what routes or paths your api would need to function. ","category":"page"},{"location":"tutorial/request_types/","page":"Request Types","title":"Request Types","text":"For example, if we were to design a weather app we'd probably want a way to lookup weather alerts for a particular state","category":"page"},{"location":"tutorial/request_types/","page":"Request Types","title":"Request Types","text":"http://localhost:8080/weather/alerts/{state}","category":"page"},{"location":"tutorial/request_types/","page":"Request Types","title":"Request Types","text":"This url can be broken down into several parts ","category":"page"},{"location":"tutorial/request_types/","page":"Request Types","title":"Request Types","text":"host → http://localhost\nport → 8080\nroute or path → /weather/alerts/{state}\npath parameter → {state}","category":"page"},{"location":"tutorial/request_types/","page":"Request Types","title":"Request Types","text":"Before we start writing code for we need to answer some questions: ","category":"page"},{"location":"tutorial/request_types/","page":"Request Types","title":"Request Types","text":"What kind of data manipulation is this route going to perform?\nAre we adding/removing/updating data? (This determines our http method)\nWill this endpoint need any inputs?\nIf so, will we need to pass them through the path or inside the body of the http request?","category":"page"},{"location":"tutorial/request_types/","page":"Request Types","title":"Request Types","text":"This is when knowing the different type of http methods comes in handy.","category":"page"},{"location":"tutorial/request_types/","page":"Request Types","title":"Request Types","text":"Common HTTP methods:","category":"page"},{"location":"tutorial/request_types/","page":"Request Types","title":"Request Types","text":"POST → when you want to create some data\nGET → when you want to get data\nPUT → update some data if it already exists or create it\nPATCH → when you want to update some data\nDELETE → when you want to delete some data","category":"page"},{"location":"tutorial/request_types/","page":"Request Types","title":"Request Types","text":"(there are more methods that aren't in this list)","category":"page"},{"location":"tutorial/request_types/","page":"Request Types","title":"Request Types","text":"In the HTTP protocol, you can communicate to each path using one (or more) of these \"methods\".","category":"page"},{"location":"tutorial/request_types/","page":"Request Types","title":"Request Types","text":"In reality you can use any of these http methods to do any of those operations. But it's heavily recommended to use the appropriate http method so that people & machines can easily understand your web api. ","category":"page"},{"location":"tutorial/request_types/","page":"Request Types","title":"Request Types","text":"Now back to our web example. Lets answer those questions:","category":"page"},{"location":"tutorial/request_types/","page":"Request Types","title":"Request Types","text":"This endpoint will return alerts from the US National Weather service api\nThe only input we will need is the state abbreviation","category":"page"},{"location":"tutorial/request_types/","page":"Request Types","title":"Request Types","text":"Since we will only be fetching data and not creating/updating/deleting anything, that means we will want to setup a GET route for our api to handle this type of action.","category":"page"},{"location":"tutorial/request_types/","page":"Request Types","title":"Request Types","text":"using Oxygen\nusing HTTP\n\n@get \"/weather/alerts/{state}\" function(req::HTTP.Request, state::String)\n    return HTTP.get(\"https://api.weather.gov/alerts/active?area=$state\")\nend\n\nserve() ","category":"page"},{"location":"tutorial/request_types/","page":"Request Types","title":"Request Types","text":"With our code in place, we can run this code and visit the endpoint in our browser to view the alerts. Try it out yourself by clicking on the link below. ","category":"page"},{"location":"tutorial/request_types/","page":"Request Types","title":"Request Types","text":"http://127.0.0.1:8080/weather/alerts/NY","category":"page"}]
}
