# Autogenerated using ProtoBuf.jl v1.0.15 on 2024-02-27T23:51:29.590
# original file: D:\Programming\JuliaProjects\oxygen-demo\src\test.proto (proto3 syntax)

module test_pb

import ProtoBuf as PB
using ProtoBuf: OneOf
using ProtoBuf.EnumX: @enumx

export MyMessage

struct MyMessage
    a::Int32
    b::Vector{String}
end
PB.default_values(::Type{MyMessage}) = (;a = zero(Int32), b = Vector{String}())
PB.field_numbers(::Type{MyMessage}) = (;a = 1, b = 2)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:MyMessage})
    a = zero(Int32)
    b = PB.BufferedVector{String}()
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            a = PB.decode(d, Int32, Val{:zigzag})
        elseif field_number == 2
            PB.decode!(d, b)
        else
            PB.skip(d, wire_type)
        end
    end
    return MyMessage(a, b[])
end

function PB.encode(e::PB.AbstractProtoEncoder, x::MyMessage)
    initpos = position(e.io)
    x.a != zero(Int32) && PB.encode(e, 1, x.a, Val{:zigzag})
    !isempty(x.b) && PB.encode(e, 2, x.b)
    return position(e.io) - initpos
end
function PB._encoded_size(x::MyMessage)
    encoded_size = 0
    x.a != zero(Int32) && (encoded_size += PB._encoded_size(x.a, 1, Val{:zigzag}))
    !isempty(x.b) && (encoded_size += PB._encoded_size(x.b, 2))
    return encoded_size
end
end # module
