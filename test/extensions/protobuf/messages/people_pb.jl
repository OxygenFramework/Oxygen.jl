# Autogenerated using ProtoBuf.jl v1.0.15 on 2024-03-10T22:46:41.410
# original file: D:\Programming\JuliaProjects\oxygen-demo\src\people.proto (proto3 syntax)

module people_pb

import ProtoBuf as PB
using ProtoBuf: OneOf
using ProtoBuf.EnumX: @enumx

export Person, People

struct Person
    name::String
    age::Int32
end
PB.default_values(::Type{Person}) = (;name = "", age = zero(Int32))
PB.field_numbers(::Type{Person}) = (;name = 1, age = 2)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:Person})
    name = ""
    age = zero(Int32)
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            name = PB.decode(d, String)
        elseif field_number == 2
            age = PB.decode(d, Int32, Val{:zigzag})
        else
            PB.skip(d, wire_type)
        end
    end
    return Person(name, age)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::Person)
    initpos = position(e.io)
    !isempty(x.name) && PB.encode(e, 1, x.name)
    x.age != zero(Int32) && PB.encode(e, 2, x.age, Val{:zigzag})
    return position(e.io) - initpos
end
function PB._encoded_size(x::Person)
    encoded_size = 0
    !isempty(x.name) && (encoded_size += PB._encoded_size(x.name, 1))
    x.age != zero(Int32) && (encoded_size += PB._encoded_size(x.age, 2, Val{:zigzag}))
    return encoded_size
end

struct People
    people::Vector{Person}
end
PB.default_values(::Type{People}) = (;people = Vector{Person}())
PB.field_numbers(::Type{People}) = (;people = 1)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:People})
    people = PB.BufferedVector{Person}()
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            PB.decode!(d, people)
        else
            PB.skip(d, wire_type)
        end
    end
    return People(people[])
end

function PB.encode(e::PB.AbstractProtoEncoder, x::People)
    initpos = position(e.io)
    !isempty(x.people) && PB.encode(e, 1, x.people)
    return position(e.io) - initpos
end
function PB._encoded_size(x::People)
    encoded_size = 0
    !isempty(x.people) && (encoded_size += PB._encoded_size(x.people, 1))
    return encoded_size
end
end # module
